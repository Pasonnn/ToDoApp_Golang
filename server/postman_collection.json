{
  "info": {
    "name": "Todo API - Golang Backend",
    "description": "Complete Postman collection for testing the Todo API built with Golang and Gin framework",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "todo-api-collection"
  },
  "item": [
    {
      "name": "Create Task",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"title\": \"Learn Go Programming\",\n  \"description\": \"Study Go programming language fundamentals and build a REST API\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/tasks",
          "host": ["{{base_url}}"],
          "path": ["tasks"]
        },
        "description": "Create a new task with title and description"
      },
      "response": [
        {
          "name": "Success Response",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Learn Go Programming\",\n  \"description\": \"Study Go programming language fundamentals and build a REST API\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/tasks",
              "host": ["{{base_url}}"],
              "path": ["tasks"]
            }
          },
          "status": "Created",
          "code": 201,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": true,\n  \"statusCode\": 201,\n  \"message\": \"Task created successfully\",\n  \"data\": {\n    \"id\": 1,\n    \"title\": \"Learn Go Programming\",\n    \"description\": \"Study Go programming language fundamentals and build a REST API\",\n    \"completed\": false\n  }\n}"
        }
      ]
    },
    {
      "name": "Create Task - Invalid Request",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"title\": \"Incomplete Task\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/tasks",
          "host": ["{{base_url}}"],
          "path": ["tasks"]
        },
        "description": "Test with missing required field (description)"
      },
      "response": [
        {
          "name": "Error Response",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Incomplete Task\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/tasks",
              "host": ["{{base_url}}"],
              "path": ["tasks"]
            }
          },
          "status": "Bad Request",
          "code": 400,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": false,\n  \"statusCode\": 400,\n  \"message\": \"Invalid request body\",\n  \"data\": null\n}"
        }
      ]
    },
    {
      "name": "Get All Tasks",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/tasks",
          "host": ["{{base_url}}"],
          "path": ["tasks"]
        },
        "description": "Retrieve all tasks from the system"
      },
      "response": [
        {
          "name": "Success Response",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tasks",
              "host": ["{{base_url}}"],
              "path": ["tasks"]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Tasks retrieved successfully\",\n  \"data\": [\n    {\n      \"id\": 1,\n      \"title\": \"Learn Go Programming\",\n      \"description\": \"Study Go programming language fundamentals and build a REST API\",\n      \"completed\": false\n    },\n    {\n      \"id\": 2,\n      \"title\": \"Build Frontend\",\n      \"description\": \"Create React frontend to consume the API\",\n      \"completed\": false\n    }\n  ]\n}"
        }
      ]
    },
    {
      "name": "Update Task Completion",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"completed\": true\n}"
        },
        "url": {
          "raw": "{{base_url}}/tasks/1",
          "host": ["{{base_url}}"],
          "path": ["tasks", "1"]
        },
        "description": "Mark a task as completed"
      },
      "response": [
        {
          "name": "Success Response",
          "originalRequest": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"completed\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/tasks/1",
              "host": ["{{base_url}}"],
              "path": ["tasks", "1"]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Task updated successfully\",\n  \"data\": {\n    \"id\": 1,\n    \"title\": \"Learn Go Programming\",\n    \"description\": \"Study Go programming language fundamentals and build a REST API\",\n    \"completed\": true\n  }\n}"
        }
      ]
    },
    {
      "name": "Update Task - Not Found",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"completed\": true\n}"
        },
        "url": {
          "raw": "{{base_url}}/tasks/999",
          "host": ["{{base_url}}"],
          "path": ["tasks", "999"]
        },
        "description": "Test updating non-existent task"
      },
      "response": [
        {
          "name": "Not Found Response",
          "originalRequest": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"completed\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/tasks/999",
              "host": ["{{base_url}}"],
              "path": ["tasks", "999"]
            }
          },
          "status": "Not Found",
          "code": 404,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": false,\n  \"statusCode\": 404,\n  \"message\": \"Task not found\",\n  \"data\": null\n}"
        }
      ]
    },
    {
      "name": "Update Task - Invalid ID",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"completed\": true\n}"
        },
        "url": {
          "raw": "{{base_url}}/tasks/invalid",
          "host": ["{{base_url}}"],
          "path": ["tasks", "invalid"]
        },
        "description": "Test with invalid task ID format"
      },
      "response": [
        {
          "name": "Bad Request Response",
          "originalRequest": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"completed\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/tasks/invalid",
              "host": ["{{base_url}}"],
              "path": ["tasks", "invalid"]
            }
          },
          "status": "Bad Request",
          "code": 400,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": false,\n  \"statusCode\": 400,\n  \"message\": \"Invalid task ID\",\n  \"data\": null\n}"
        }
      ]
    },
    {
      "name": "Delete Task",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{base_url}}/tasks/1",
          "host": ["{{base_url}}"],
          "path": ["tasks", "1"]
        },
        "description": "Delete a task by ID"
      },
      "response": [
        {
          "name": "Success Response",
          "originalRequest": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tasks/1",
              "host": ["{{base_url}}"],
              "path": ["tasks", "1"]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": true,\n  \"statusCode\": 200,\n  \"message\": \"Task deleted successfully\",\n  \"data\": {\n    \"id\": 1\n  }\n}"
        }
      ]
    },
    {
      "name": "Delete Task - Not Found",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{base_url}}/tasks/999",
          "host": ["{{base_url}}"],
          "path": ["tasks", "999"]
        },
        "description": "Test deleting non-existent task"
      },
      "response": [
        {
          "name": "Not Found Response",
          "originalRequest": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tasks/999",
              "host": ["{{base_url}}"],
              "path": ["tasks", "999"]
            }
          },
          "status": "Not Found",
          "code": 404,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n  \"success\": false,\n  \"statusCode\": 404,\n  \"message\": \"Task not found\",\n  \"data\": null\n}"
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script to set up any necessary variables",
          "console.log('Making request to: ' + pm.request.url);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Test script to validate responses",
          "pm.test('Status code is 200 or 201', function () {",
          "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
          "});",
          "",
          "pm.test('Response has required fields', function () {",
          "    const jsonData = pm.response.json();",
          "    pm.expect(jsonData).to.have.property('success');",
          "    pm.expect(jsonData).to.have.property('statusCode');",
          "    pm.expect(jsonData).to.have.property('message');",
          "    pm.expect(jsonData).to.have.property('data');",
          "});",
          "",
          "pm.test('Success field is boolean', function () {",
          "    const jsonData = pm.response.json();",
          "    pm.expect(jsonData.success).to.be.a('boolean');",
          "});",
          "",
          "pm.test('Status code matches response', function () {",
          "    const jsonData = pm.response.json();",
          "    pm.expect(jsonData.statusCode).to.equal(pm.response.code);",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080",
      "type": "string"
    }
  ]
}
